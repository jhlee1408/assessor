
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "assessor"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('assessor')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bballHR")
> ### * bballHR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bballHR
> ### Title: MLB Players' Home Run and Batted Ball Statistics with Red Zone
> ###   Metrics (2017-2019)
> ### Aliases: bballHR
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bballHR)
> head(bballHR)
           name  playerID teamID year HR  AB mean_exit_velo mean_launch_angle
1    Jose Abreu abreujo02    CHA 2017 33 621       90.54188          11.27789
2    Jose Abreu abreujo02    CHA 2018 22 499       91.31206          12.08543
3    Jose Abreu abreujo02    CHA 2019 33 634       92.12946          10.97996
4  Ronald Acuna acunaro01    ATL 2019 41 626       90.65088          14.04825
5  Willy Adames adamewi01    TBA 2019 20 531       88.38465          10.50128
6 Jesus Aguilar aguilje01    MIL 2018 35 492       89.78601          16.29793
  launch_angle_75 launch_angle_70 launch_angle_65 exit_velo_75 exit_velo_80
1              27            23.0           20.00      102.600       104.30
2              27            24.0           20.00      102.900       104.32
3              26            22.0           18.00      103.000       104.30
4              30            28.0           26.00      103.525       104.90
5              27            23.0           20.00       99.350       101.00
6              33            30.5           26.25      100.375       102.10
  exit_velo_85 count_red_zone prop_red_zone BPF
1      105.750             74     0.1312057  98
2      106.135             53     0.1247059  97
3      106.000             76     0.1404806  97
4      106.675             86     0.1787942 105
5      102.650             62     0.1486811  97
6      103.325             71     0.1674528 102
> 
> 
> 
> 
> cleanEx()
> nameEx("ord_curve")
> ### * ord_curve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ord_curve
> ### Title: Ordered curve for assessing mean structures
> ### Aliases: ord_curve
> 
> ### ** Examples
> 
> ## Binary example of ordered curve
> n <- 500
> set.seed(1234)
> x1 <- rnorm(n, 1, 1)
> x2 <- rbinom(n, 1, 0.7)
> beta0 <- -5
> beta1 <- 2
> beta2 <- 1
> beta3 <- 3
> q1 <- 1 / (1 + exp(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x1 * x2))
> y1 <- rbinom(n, size = 1, prob = 1 - q1)
> 
> ## True Model
> model0 <- glm(y1 ~ x1 * x2, family = binomial(link = "logit"))
> ord_curve(model0, thr = model0$fitted.values) # set the threshold as fitted values
> 
> ## Missing a covariate
> model1 <- glm(y1 ~ x1, family = binomial(link = "logit"))
> ord_curve(model1, thr = x2) # set the threshold as a covariate
> 
> ## Poisson example of ordered curve
> n <- 500
> set.seed(1234)
> x1 <- rnorm(n)
> x2 <- rnorm(n)
> beta0 <- 0
> beta1 <- 2
> beta2 <- 1
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> 
> y <- rpois(n, lambda1)
> 
> ## True Model
> poismodel1 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> ord_curve(poismodel1, thr = poismodel1$fitted.values)
> 
> ## Missing a covariate
> poismodel2 <- glm(y ~ x1, family = poisson(link = "log"))
> ord_curve(poismodel2, thr = poismodel2$fitted.values)
> ord_curve(poismodel2, thr = x2)
> 
> 
> 
> 
> cleanEx()
> nameEx("qqresid")
> ### * qqresid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qqresid
> ### Title: QQ-plots of DPIT residuals
> ### Aliases: qqresid
> 
> ### ** Examples
> 
> n <- 100
> b <- c(2, 1, -2)
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> y <- rpois(n, exp(b[1] + b[2] * x1 + b[3] * x2))
> 
> m1 <- glm(y ~ x1 + x2, family = poisson)
> qqresid(m1, scale = "normal")
> qqresid(m1, scale = "uniform")
> 
> 
> 
> cleanEx()
> nameEx("resid_2pm")
> ### * resid_2pm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid_2pm
> ### Title: Residuals for regression models with two-part outcomes
> ### Aliases: resid_2pm
> 
> ### ** Examples
> 
> library(MASS)
> n <- 500
> beta10 <- 1
> beta11 <- -2
> beta12 <- -1
> beta13 <- -1
> beta14 <- -1
> beta15 <- -2
> x11 <- rnorm(n)
> x12 <- rbinom(n, size = 1, prob = 0.4)
> 
> p1 <- 1 / (1 + exp(-(beta10 + x11 * beta11 + x12 * beta12)))
> lambda1 <- exp(beta13 + beta14 * x11 + beta15 * x12)
> y2 <- rgamma(n, scale = lambda1 / 2, shape = 2)
> y <- rep(0, n)
> u <- runif(n, 0, 1)
> ind1 <- which(u >= p1)
> y[ind1] <- y2[ind1]
> 
> # models as input
> mgamma <- glm(y[ind1] ~ x11[ind1] + x12[ind1], family = Gamma(link = "log"))
> m10 <- glm(y == 0 ~ x12 + x11, family = binomial(link = "logit"))
> resid.model <- resid_2pm(model0 = m10, model1 = mgamma, y = y)
> 
> # PIT as input
> cdfgamma <- pgamma(y[ind1],
+   scale = mgamma$fitted.values * gamma.dispersion(mgamma),
+   shape = 1 / gamma.dispersion(mgamma)
+ )
> p1f <- m10$fitted.values
> resid.pit <- resid_2pm(y = y, part0 = p1f, part1 = cdfgamma)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("resid_disc")
> ### * resid_disc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid_disc
> ### Title: Residuals for regression models with discrete outcomes
> ### Aliases: resid_disc
> 
> ### ** Examples
> 
> library(MASS)
> n <- 500
> set.seed(1234)
> ## Negative Binomial example
> # Covariates
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> ### Parameters
> beta0 <- -2
> beta1 <- 2
> beta2 <- 1
> size1 <- 2
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> # generate outcomes
> y <- rnbinom(n, mu = lambda1, size = size1)
> 
> # True model
> model1 <- glm.nb(y ~ x1 + x2)
> resid.nb1 <- resid_disc(model1, plot = TRUE, scale = "uniform")
> 
> # Overdispersion
> model2 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> resid.nb2 <- resid_disc(model2, plot = TRUE, scale = "normal")
> 
> ## Binary example
> n <- 500
> set.seed(1234)
> # Covariates
> x1 <- rnorm(n, 1, 1)
> x2 <- rbinom(n, 1, 0.7)
> # Coefficients
> beta0 <- -5
> beta1 <- 2
> beta2 <- 1
> beta3 <- 3
> q1 <- 1 / (1 + exp(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x1 * x2))
> y1 <- rbinom(n, size = 1, prob = 1 - q1)
> 
> # True model
> model01 <- glm(y1 ~ x1 * x2, family = binomial(link = "logit"))
> resid.bin1 <- resid_disc(model01, plot = TRUE)
> 
> # Missing covariates
> model02 <- glm(y1 ~ x1, family = binomial(link = "logit"))
> resid.bin2 <- resid_disc(model02, plot = TRUE)
> 
> ## Poisson example
> n <- 500
> set.seed(1234)
> # Covariates
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> # Coefficients
> beta0 <- -2
> beta1 <- 2
> beta2 <- 1
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> y <- rpois(n, lambda1)
> 
> # True model
> poismodel1 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> resid.poi1 <- resid_disc(poismodel1, plot = TRUE)
> 
> # Enlarge three outcomes
> y <- rpois(n, lambda1) + c(rep(0, (n - 3)), c(10, 15, 20))
> poismodel2 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> resid.poi2 <- resid_disc(poismodel2, plot = TRUE)
> 
> ## Ordinal example
> n <- 500
> set.seed(1234)
> # Covariates
> x1 <- rnorm(n, mean = 2)
> # Coefficient
> beta1 <- 3
> 
> # True model
> p0 <- plogis(1, location = beta1 * x1)
> p1 <- plogis(4, location = beta1 * x1) - p0
> p2 <- 1 - p0 - p1
> genemult <- function(p) {
+   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3]))
+ }
> test <- apply(cbind(p0, p1, p2), 1, genemult)
> y1 <- rep(0, n)
> y1[which(test[1, ] == 1)] <- 0
> y1[which(test[2, ] == 1)] <- 1
> y1[which(test[3, ] == 1)] <- 2
> multimodel <- polr(as.factor(y1) ~ x1, method = "logistic")
> resid.ord1 <- resid_disc(multimodel, plot = TRUE)
> 
> ## Non-Proportionality
> n <- 500
> set.seed(1234)
> x1 <- rnorm(n, mean = 2)
> beta1 <- 3
> beta2 <- 1
> p0 <- plogis(1, location = beta1 * x1)
> p1 <- plogis(4, location = beta2 * x1) - p0
> p2 <- 1 - p0 - p1
> genemult <- function(p) {
+   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3]))
+ }
> test <- apply(cbind(p0, p1, p2), 1, genemult)
> y1 <- rep(0, n)
> y1[which(test[1, ] == 1)] <- 0
> y1[which(test[2, ] == 1)] <- 1
> y1[which(test[3, ] == 1)] <- 2
> multimodel <- polr(as.factor(y1) ~ x1, method = "logistic")
> resid.ord2 <- resid_disc(multimodel, plot = TRUE)
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("resid_quasi")
> ### * resid_quasi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid_quasi
> ### Title: Quasi Emprical residuals functions
> ### Aliases: resid_quasi
> 
> ### ** Examples
> 
> ## Negative Binomial example
> library(MASS)
> # Covariates
> n <- 500
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> ### Parameters
> beta0 <- -2
> beta1 <- 2
> beta2 <- 1
> size1 <- 2
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> # generate outcomes
> y <- rnbinom(n, mu = lambda1, size = size1)
> 
> # True model
> model1 <- glm.nb(y ~ x1 + x2)
> resid.nb1 <- resid_quasi(model1)
Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 /Multistart 1 of 1 |Multistart 1 of 1 |                   > 
> # Overdispersion
> model2 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> resid.nb2 <- resid_quasi(model2)
Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 /Multistart 1 of 1 |Multistart 1 of 1 |                   > 
> ## Zero inflated Poisson example
> library(pscl)
Classes and Methods for R originally developed in the
Political Science Computational Laboratory
Department of Political Science
Stanford University (2002-2015),
by and under the direction of Simon Jackman.
hurdle and zeroinfl functions by Achim Zeileis.
> n <- 500
> set.seed(1234)
> # Covariates
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> # Coefficients
> beta0 <- -2
> beta1 <- 2
> beta2 <- 1
> beta00 <- -2
> beta10 <- 2
> 
> # Mean of Poisson part
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> # Excess zero probability
> p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1)))
> ## simulate outcomes
> y0 <- rbinom(n, size = 1, prob = 1 - p0)
> y1 <- rpois(n, lambda1)
> y <- ifelse(y0 == 0, 0, y1)
> ## True model
> modelzero1 <- zeroinfl(y ~ x1 + x2 | x1, dist = "poisson", link = "logit")
> resid.zero1 <- resid_quasi(modelzero1)
Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 |Multistart 1 of 1 /Multistart 1 of 1 |Multistart 1 of 1 |                   > 
> 
> 
> cleanEx()

detaching ‘package:pscl’, ‘package:MASS’

> nameEx("resid_semiconti")
> ### * resid_semiconti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid_semiconti
> ### Title: Residuals for regression models with semicontinuous outcomes
> ### Aliases: resid_semiconti
> 
> ### ** Examples
> 
> ## Tweedie model
> library(tweedie)
> library(statmod)
> n <- 500
> x11 <- rnorm(n)
> x12 <- rnorm(n)
> beta0 <- 5
> beta1 <- 1
> beta2 <- 1
> lambda1 <- exp(beta0 + beta1 * x11 + beta2 * x12)
> y1 <- rtweedie(n, mu = lambda1, xi = 1.6, phi = 10)
> # Choose parameter p
> # True model
> model1 <-
+   glm(y1 ~ x11 + x12,
+     family = tweedie(var.power = 1.6, link.power = 0)
+   )
> resid.tweedie <- resid_semiconti(model1)
> 
> ## Tobit regression model
> library(VGAM)
Loading required package: stats4
Loading required package: splines
> beta13 <- 1
> beta14 <- -3
> beta15 <- 3
> 
> set.seed(1234)
> x11 <- runif(n)
> x12 <- runif(n)
> lambda1 <- beta13 + beta14 * x11 + beta15 * x12
> sd0 <- 0.3
> yun <- rnorm(n, mean = lambda1, sd = sd0)
> y <- ifelse(yun >= 0, yun, 0)
> 
> # Using VGAM package
> # True model
> fit1 <- vglm(formula = y ~ x11 + x12, tobit(Upper = Inf, Lower = 0, lmu = "identitylink"))
> # Missing covariate
> fit1miss <- vglm(formula = y ~ x11, tobit(Upper = Inf, Lower = 0, lmu = "identitylink"))
> 
> resid.tobit1 <- resid_semiconti(fit1, plot = TRUE)
> resid.tobit2 <- resid_semiconti(fit1miss, plot = TRUE)
> 
> # Using AER package
> library(AER)
Loading required package: car
Loading required package: carData

Attaching package: ‘car’

The following object is masked from ‘package:VGAM’:

    logit

Loading required package: lmtest
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘lmtest’

The following object is masked from ‘package:VGAM’:

    lrtest

Loading required package: sandwich
Loading required package: survival

Attaching package: ‘AER’

The following object is masked from ‘package:VGAM’:

    tobit

> # True model
> fit2 <- tobit(y ~ x11 + x12, left = 0, right = Inf, dist = "gaussian")
> # Missing covariate
> fit2miss <- tobit(y ~ x11, left = 0, right = Inf, dist = "gaussian")
> resid.aer1 <- resid_semiconti(fit2, plot = TRUE)
> resid.aer2 <- resid_semiconti(fit2miss, plot = TRUE)
> 
> 
> 
> cleanEx()

detaching ‘package:AER’, ‘package:survival’, ‘package:sandwich’,
  ‘package:lmtest’, ‘package:zoo’, ‘package:car’, ‘package:carData’,
  ‘package:VGAM’, ‘package:splines’, ‘package:stats4’,
  ‘package:statmod’, ‘package:tweedie’

> nameEx("resid_zeroinfl")
> ### * resid_zeroinfl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resid_zeroinfl
> ### Title: Residuals for regression models with zero-inflated outcomes
> ### Aliases: resid_zeroinfl
> 
> ### ** Examples
> 
> ## Zero-Inflated Poisson
> library(pscl)
Classes and Methods for R originally developed in the
Political Science Computational Laboratory
Department of Political Science
Stanford University (2002-2015),
by and under the direction of Simon Jackman.
hurdle and zeroinfl functions by Achim Zeileis.
> n <- 500
> set.seed(1234)
> # Covariates
> x1 <- rnorm(n)
> x2 <- rbinom(n, 1, 0.7)
> # Coefficients
> beta0 <- -2
> beta1 <- 2
> beta2 <- 1
> beta00 <- -2
> beta10 <- 2
> 
> # Mean of Poisson part
> lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)
> # Excess zero probability
> p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1)))
> ## simulate outcomes
> y0 <- rbinom(n, size = 1, prob = 1 - p0)
> y1 <- rpois(n, lambda1)
> y <- ifelse(y0 == 0, 0, y1)
> ## True model
> modelzero1 <- zeroinfl(y ~ x1 + x2 | x1, dist = "poisson", link = "logit")
> resid.zero1 <- resid_zeroinfl(modelzero1, plot = TRUE, scale = "uniform")
> 
> ## Zero inflation
> modelzero2 <- glm(y ~ x1 + x2, family = poisson(link = "log"))
> resid.zero2 <- resid_disc(modelzero2, plot = TRUE, scale = "normal")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:pscl’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.039 0.167 4.797 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
