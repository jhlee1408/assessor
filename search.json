[{"path":"https://jhlee1408.github.io/assessor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 residuals authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jhlee1408.github.io/assessor/articles/2pm.html","id":"two-part-models","dir":"Articles","previous_headings":"","what":"Two part models","title":"Two part","text":"input arguments resid_2pm() function differ functions assessor package. Specifically, users can utilize function either models Probability Integral Transform (PIT) input. instance, evaluating distribution assumptions two-part model combines logistic gamma regression, provide logistic regression model object argument model0 gamma regression model object model1. recommend utilizing model input assessing gamma + logistic two-part model. Alternatively, users can directly use PIT input two-part model gamma+logistic combination. cases, users first calculate PIT input part0 part1, respectively. function accommodates two combinations: either model0 conjunction model1 part0 conjunction part1. Note essential specify y (outcome) values function arguments. underlying model two-part model. probability zero \\[p_0(\\mathbf{X})=\\text{logit}^{-1}\\left(\\beta_0+X_{1}\\beta_{1}+X_{2}\\beta_{2} \\right),\\] \\(X_1\\) standard normal variable, \\(X_2\\) binary probability one 0.4, \\((\\beta_0,\\beta_{1},\\beta_{2})=(1,-2,-1)\\). gamma distribution employed generate positive data. mean function positive part described \\[\\lambda_S=\\exp\\left(\\beta_{0S}+\\beta_{1S}X_1+\\beta_{2S}X_2\\right).\\] let \\((\\beta_{0S},\\beta_{1S},\\beta_{2S})=(-1,-1,-2)\\). dispersion parameter set 0.5. Models input PIT input","code":"library(assessor) library(MASS) n <- 500 beta10 <- 1 beta11 <- -2 beta12 <- -1 beta13 <- -1 beta14 <- -1 beta15 <- -2 x11 <- rnorm(n) x12 <- rbinom(n, size = 1, prob = 0.4)  p1 <- 1 / (1 + exp(-(beta10 + x11 * beta11 + x12 * beta12))) lambda1 <- exp(beta13 + beta14 * x11 + beta15 * x12) y2 <- rgamma(n, scale = lambda1 / 2, shape = 2) y <- rep(0, n) u <- runif(n, 0, 1) ind1 <- which(u >= p1) y[ind1] <- y2[ind1] # models as input mgamma <- glm(y[ind1] ~ x11[ind1] + x12[ind1], family = Gamma(link = \"log\")) # Gamma regression m10 <- glm(y == 0 ~ x12 + x11, family = binomial(link = \"logit\")) # logistic regression  resid.models <- resid_2pm(model0 = m10, model1 = mgamma, y = y) library(assessor) library(MASS) n <- 500 beta10 <- 1 beta11 <- -2 beta12 <- -1 beta13 <- -1 beta14 <- -1 beta15 <- -2 x11 <- rnorm(n) x12 <- rbinom(n, size = 1, prob = 0.4)  p1 <- 1 / (1 + exp(-(beta10 + x11 * beta11 + x12 * beta12))) lambda1 <- exp(beta13 + beta14 * x11 + beta15 * x12) y2 <- rgamma(n, scale = lambda1 / 2, shape = 2) y <- rep(0, n) u <- runif(n, 0, 1) ind1 <- which(u >= p1) y[ind1] <- y2[ind1]  # PIT as input mgamma <- glm(y[ind1] ~ x11[ind1] + x12[ind1], family = Gamma(link = \"log\")) # gamma regression m10 <- glm(y == 0 ~ x12 + x11, family = binomial(link = \"logit\")) # logistic regression  cdfgamma <- pgamma(y[ind1],   scale = mgamma$fitted.values * gamma.dispersion(mgamma),   shape = 1 / gamma.dispersion(mgamma) ) p1f <- m10$fitted.values  resid.pit <- resid_2pm(part0= p1f, part1 = cdfgamma, y = y)"},{"path":"https://jhlee1408.github.io/assessor/articles/assessor.html","id":"assessor","dir":"Articles","previous_headings":"","what":"assessor","title":"Introduction to assessor","text":"goal assessor provide assessment tools regression models discrete semicontinuous outcomes proposed Yang (2024) Yang(2024). calculates double probability integral transform (DPIT) residuals, constructs QQ plots residuals model diagnostics, constructs ordered curve assessing mean structures.","code":""},{"path":"https://jhlee1408.github.io/assessor/articles/assessor.html","id":"general-function-arguments","dir":"Articles","previous_headings":"assessor","what":"General function arguments","title":"Introduction to assessor","text":"assessor, functions calculating DPIT residuals various type models: discrete, zero-inflated, semi-continuous outcome regression models. resid_disc(), resid_zeroinfl(), resid_semiconti(), resid_2pm() functions evaluating DPIT residuals discrete, zero-inflated discrete, semicontinuous, two-part outcomes, respectively. share arguments: model: function supports certain types model objects. Check model objects applicable. plot: set plot=TRUE, function return QQ-plot DPIT residuals. users may need QQ-plot. case, qqresid() returns QQ-plot without returning DPIT residuals. scale: can choose scale residuals among normal uniform scales. sample quantiles residuals plotted theoretical quantiles standard normal distribution normal scale, theoretical quantiles uniform (0,1) distribution uniform scale. default scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/articles/assessor.html","id":"real-data-example","dir":"Articles","previous_headings":"assessor","what":"Real data example","title":"Introduction to assessor","text":"solder data, extracted faraway package, lends fitting either Poisson regression Negative Binomial regression. selection models depends underlying distribution characteristics data. validate distribution assumption, comprehensive approach involves assessing DPIT residuals scrutinizing QQ plot derived residuals.  left panel figure presents QQ plot DPIT residuals use Poisson GLM (modp). residuals display pronounced S-shaped pattern, hinting potential overdispersion. second third panels present DPIT residuals negative binomial regression (modpnb) different scales. plots align closely along diagonal line, suggesting assumption negative binomial distribution appears appropriate. distinction lies scale parameter; middle panel displays plot normal scale, \\(x\\) \\(y\\) axes spanning beyond (0,1), right panel limits axes range 0 1.","code":"library(assessor) library(faraway)  library(MASS) data(\"solder\") # from faraway package   ## Negative Binomial modpnb <- glm.nb(skips~.,data=solder) modp <- glm(skips~.,famil=poisson(link=\"log\"),data=solder)  ## QQ-plot par(mfrow=c(1,3)) poi.resid <- resid_disc(modp,plot = TRUE) norm.resid <- resid_disc(modpnb,plot = TRUE, scale = \"normal\") unif.resid <- resid_disc(modpnb,plot = TRUE, scale = \"uniform\")"},{"path":"https://jhlee1408.github.io/assessor/articles/disc.html","id":"discrete-outcome-regression-models","dir":"Articles","previous_headings":"","what":"Discrete outcome regression models","title":"Discrete","text":"resid_disc() used calculating DPIT residuals regression models discrete outcomes constructing QQ-plots. suitable model objects follows: Negative binomial, MASS::glm.nb() Poisson, glm(formula, family=poisson(link=\"log\")) Binary, glm(formula, family=binomial(link=\"logit\")) Ordinal, MASS::polr() Negative binomial Poisson Binary Ordinal example usage resid_disc() function negative binomial regression included . data generated using negative binomial distribution mean \\(\\mu =  \\exp\\left(\\beta_0 +X_1\\beta_1+X_2\\beta_2\\right)\\), \\(X_1 \\sim N(0,1)\\), \\(X_2\\) binary probability success 0.7. coefficients set \\(\\beta_0 = -2, \\beta_1 = 2\\), \\(\\beta_2=1\\). underlying size parameter 2. assess model assumptions, one can employ QQ-plot generated either reisd_disc() qqresid(). model1 correctly specified GLM negative binomial distribution, whereas model2 incorrectly assumes Poisson family, thus overdispersion present. left panel displays diagonal QQ-plot along straight red line, indicative model assumption holding. contrast, right panel deviates diagonal line, suggesting lack adherence assumption. addition, overdispersed model, due underestimated variance, S-shaped pattern presents QQ-plot. Similarly, can simulate Poisson random variable using covariates \\(x_1\\) \\(x_2\\). true mean \\(Y\\) intricately connected \\(x_1\\) \\(x_2\\), expressed ensuing relationship: \\[ Y \\sim \\text{Poisson}(\\lambda = \\exp(\\beta_0 + \\beta_1 x_1 + \\beta_2 x_2)), \\] \\(\\beta_0=-2,~\\beta_1=2,~\\beta_2=1\\). manually enlarged three outcomes adding values 10, 15, 20 , respectively. right panel, can see three modified data points stand , signaling potential outliers.  binary example, generate Bernoulli random variable, \\(Y\\), whose mean depends covariates \\(x_1\\) \\(x_2\\). underlying model logistic regression probability 1 \\(\\mathrm{logit}^{-1}(\\beta_0+\\beta_1 X_1+\\beta_2 X_2+\\beta_3X_1 X_2)\\), \\((\\beta_0,\\beta_1,\\beta_2,\\beta_3)=(-5,2,1,3)\\), \\(X_1\\sim N(1,1)\\), \\(X_2\\) dummy variable probability one equal 0.7. misspecified model, binary covariate interaction term omitted. true model, distinguished model1, visually represented left panel, showcasing alignment red diagonal line. alignment serves indicator model’s adherence expected pattern. hand, model2, made without inclusion variable \\(x_2\\) interaction, presents deviation prescribed red diagonal line. resid_disc() function also applicable ordinal regression fitted MASS::polr(). experiment, consider ordinal regression models three levels 0, 1, 2. ordinal logistic regression model proportionality assumption, \\(P(Y\\leq j)=F(\\alpha_j),\\) \\(F\\) distribution function logistic random variable mean \\(\\beta_1x_1\\). let \\(\\alpha_0=1\\), \\(\\alpha_1=4\\), \\(\\beta_1=3\\), \\(x_1\\sim N(2,1)\\). Specifically, \\(P(Y\\leq 0)=F(\\alpha_0)\\) described whereas \\(P(Y\\leq 1)=F_1(\\alpha_1)\\), \\(F_1\\) distribution function logistic random variable mean \\(\\beta_2x_1\\) set \\(\\beta_2=1\\). data incorrectly fit proportional odds model. result, considering diagnostic assessment QQ-plots, model1 exhibits diagonal QQ-plot, indicating favorable alignment underlying assumptions. contrast, QQ-plot associated model2 deviates expected diagonal line, suggesting departure idealized model assumptions. discrepancy underscores importance careful consideration inclusion relevant variables model specification ensure robustness validity statistical models.","code":"library(assessor) library(MASS) n <- 500 set.seed(1234) ## Negative Binomial example # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7)  ### Parameters beta0 <- -2 beta1 <- 2 beta2 <- 1 size1 <- 2 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)  # generate outcomes y <- rnbinom(n, mu = lambda1, size = size1) par(mfrow=c(1,2)) # True model model1 <- glm.nb(y ~ x1 + x2) resd1 <- resid_disc(model1, plot = TRUE, scale = \"normal\")  # Overdispersion model2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resd2 <- resid_disc(model2, plot = TRUE, scale = \"normal\") ## Poisson example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7)  # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) y <- rpois(n, lambda1) par(mfrow=c(1,2)) # True model poismodel1 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid1 <- resid_disc(poismodel1, plot = TRUE)  # Enlarge three outcomes y <- rpois(n, lambda1) + c(rep(0, (n - 3)), c(10, 15, 20)) poismodel2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid2 <- resid_disc(poismodel2, plot = TRUE) ## Binary example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n, 1, 1) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -5 beta1 <- 2 beta2 <- 1 beta3 <- 3 q1 <- 1 / (1 + exp(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x1 * x2))  y1 <- rbinom(n, size = 1, prob = 1 - q1) par(mfrow=c(1,2)) # True model model01 <- glm(y1 ~ x1 * x2, family = binomial(link = \"logit\")) resid1 <- resid_disc(model01, plot = TRUE)  # Missing covariates model02 <- glm(y1 ~ x1, family = binomial(link = \"logit\")) resid2 <- resid_disc(model02, plot = TRUE) ## Ordinal example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n, mean = 2) # Coefficient beta1 <- 3  # True model p0 <- plogis(1, location = beta1 * x1) p1 <- plogis(4, location = beta1 * x1) - p0 p2 <- 1 - p0 - p1 genemult <- function(p) {   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3])) } test <- apply(cbind(p0, p1, p2), 1, genemult) y1 <- rep(0, n) y1[which(test[1, ] == 1)] <- 0 y1[which(test[2, ] == 1)] <- 1 y1[which(test[3, ] == 1)] <- 2 multimodel <- polr(as.factor(y1) ~ x1, method = \"logistic\") We then generate data under the scenario where the assumption of proportionality is not met, which is a common issue for ordinal regression models. ## Non-Proportionality n <- 500 set.seed(1234) x1 <- rnorm(n, mean = 2) beta1 <- 3 beta2 <- 1 p0 <- plogis(1, location = beta1 * x1) p1 <- plogis(4, location = beta2 * x1) - p0  p2 <- 1 - p0 - p1 genemult <- function(p) {   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3])) } test <- apply(cbind(p0, p1, p2), 1, genemult) y1 <- rep(0, n) y1[which(test[1, ] == 1)] <- 0 y1[which(test[2, ] == 1)] <- 1 y1[which(test[3, ] == 1)] <- 2 multimodel2 <- polr(as.factor(y1) ~ x1, method = \"logistic\") par(mfrow=c(1,2)) resid1 <- resid_disc(multimodel, plot = TRUE) resid2 <- resid_disc(multimodel2, plot = TRUE)"},{"path":"https://jhlee1408.github.io/assessor/articles/ord.html","id":"assessing-the-mean-structure","dir":"Articles","previous_headings":"","what":"Assessing the mean structure","title":"Ordered curve","text":"ord_curve()creates plot assess mean structure regression models. plot compares cumulative sum response variable hypothesized value. Deviation diagonal suggests possibility mean structure model incorrect. Ordered curve method restricted discrete outcome regression model. function also supports continuous outcome regression lm object well glm, glm.nb, polr. example , underlying model logistic regression probability 1 \\(\\mathrm{logit}^{-1}(\\beta_0+\\beta_1 X_1+\\beta_2 X_2+\\beta_3X_1 X_2)\\), \\((\\beta_0,\\beta_1,\\beta_2,\\beta_3)=(-5,2,1,3)\\), \\(X_1\\sim N(1,1)\\), \\(X_2\\) dummy variable probability one equal 0.7. misspecified model, binary covariate interaction term omitted. #### Example figures illustrate ordered curves plots corresponding model0 model1. left panel, curve closely aligns diagonal line, indicating mean structure model0 correctly specified. contrary, model1 exhibits deviation diagonal line due omission variable \\(x_2\\). misspecification, coupled choice threshold value \\(x_2\\), results observed discrepancy ordered curve right panel. substantial disparity observed curve model1 diagonal line strongly suggests necessity including variable \\(x_2\\) model. inclusion crucial accurately capturing underlying mean structure.","code":"library(assessor) ## Binary example of ordered curve n <- 500 set.seed(1234) x1 <-rnorm(n,1,1); x2 <- rbinom(n,1,0.7) beta0 <- -5; beta1 <- 2; beta2<- 1; beta3 <- 3 q1 <-1/(1+exp(beta0+beta1*x1+beta2*x2+beta3*x1*x2)) y1 <- rbinom(n,size=1,prob = 1-q1)  par(mfrow=c(1,2)) model0 <- glm(y1~x1*x2,family =binomial(link = \"logit\") ) ord_curve(model0,thr=model0$fitted.values)  model1 <- glm(y1~x1,family =binomial(link = \"logit\") ) ord_curve(model1,thr=x2)"},{"path":"https://jhlee1408.github.io/assessor/articles/semiconti.html","id":"semicontinuous-outcome-regression-models","dir":"Articles","previous_headings":"","what":"Semicontinuous outcome regression models","title":"Semicontinuous","text":"resid_semiconti() used calculating DPIT residuals regression models semicontinuous outcomes constructing corresponding QQ-plots. Specifically, Tobit regression Tweedie regression model suitable models resid_semiconti(). suitable model objects follows: Tweedie, glm(family= tweedie()) Tobit(VGAM), VGAM::vglm() Tobit(AER), AER::tobit() Tweedie Tobit simulate y1 follow Tweedie distribution depending covariates x11 x12. constructing model2, intentional omission covariate x12 aimed facilitating direct comparison true model, model1. expected, QQ plot right panel corresponding model2 exhibits substantial deviation diagonal line, attributing deviation deliberate omission. Conversely, left panel shows closer alignment along diagonal, implying better fit including covariates, x11 x12. outcome strongly suggests incorporating covariates results appropriate improved model.  resid_semiconti() function supports calculating DPIT residuals Tobit regression VGAM::vglm AER::tobit packages. example, assume latent variable \\(Y^*\\) follows normal distribution mean given \\[\\mu=\\beta_0+\\beta_1X_1+\\beta_2X_2, \\] \\(X_1, X_2 \\sim Unif (0, 1)\\) independently, \\(\\beta_0 = 1, \\beta_1 = -3, \\beta_2 = 3\\). observe \\(Y=0\\) \\(Y^*<0\\). variables employed inputs Tobit regression analyses provided VGAM AER packages. model fit1miss, corresponding right QQ plot, intentionally omits covariate x12. omission leads deviation diagonal line QQ plot, observed right panel. Thus, can interpreted model misspecification. contrast, left panel, corresponding model including covariates, aligns closely along diagonal line.  interpretation remains VGAM example. Note results AER exactly VGAM example.","code":"## Tweedie model library(assessor) library(tweedie) library(statmod) n <- 500 x11 <- rnorm(n) x12 <- rnorm(n) beta0 <- 5 beta1 <- 1 beta2 <- 1 lambda1 <- exp(beta0 + beta1 * x11 + beta2 * x12) y1 <- rtweedie(n, mu = lambda1, xi = 1.6, phi = 10) # True model model1 <-   glm(y1 ~ x11 + x12,     family = tweedie(var.power = 1.6, link.power = 0)   )  # missing covariate model2 <-  glm(y1 ~ x11 ,     family = tweedie(var.power = 1.6, link.power = 0)   )  par(mfrow=c(1,2)) resid1 <- resid_semiconti(model1) resid2 <- resid_semiconti(model2) ## Tobit regression model library(VGAM) beta13 <- 1 beta14 <- -3 beta15 <- 3  set.seed(123) x11 <- runif(n) x12 <- runif(n) lambda1 <- beta13 + beta14 * x11 + beta15 * x12 sd0 <- 0.3 yun <- rnorm(n, mean = lambda1, sd = sd0) y <- ifelse(yun >= 0, yun, 0) # Using VGAM package # True model fit1 <- vglm(formula = y ~ x11 + x12, tobit(Upper = Inf, Lower = 0, lmu = \"identitylink\")) # Missing covariate fit1miss <- vglm(formula = y ~ x11, tobit(Upper = Inf, Lower = 0, lmu = \"identitylink\"))  par(mfrow=c(1,2)) resid1 <- resid_semiconti(fit1, plot = TRUE) resid2 <- resid_semiconti(fit1miss, plot = TRUE) # Using AER package library(AER) # True model fit2 <- tobit(y ~ x11 + x12, left = 0, right = Inf, dist = \"gaussian\") # Missing covariate par(mfrow=c(1,2)) fit2miss <- tobit(y ~ x11, left = 0, right = Inf, dist = \"gaussian\") reisd1 <- resid_semiconti(fit2, plot = TRUE) resid2 <- resid_semiconti(fit2miss, plot = TRUE)"},{"path":"https://jhlee1408.github.io/assessor/articles/zeroinfl.html","id":"zero-inflation-regression-models","dir":"Articles","previous_headings":"","what":"Zero-Inflation regression models","title":"Zero-inflated discrete","text":"resid_zeroinfl() used calculating DPIT residuals regression models zero-inflation outcomes drawing corresponding QQ-plots. suitable model objects follows: Zero-Inflated Poisson, pscl::zeroinfl(dist = \"poisson\") Zero-Inflated negative binomial, pscl::zeroinfl(dist = \"negbin\") Zero-Inflation Poisson Zero-Inflation Negative Binomial simulate data using zero-inflated Poisson model. probability excess zeros modeled \\(\\mathrm{logit}(p_0) = \\beta_{00} + \\beta_{10}X_1\\), Poisson component mean \\(\\lambda = \\exp(\\beta_0 +\\beta_1X_1 +\\beta_2X_2)\\), \\(X_1 \\sim N(0,1)\\) \\(X_2\\) dummy variable probability 1 equal 0.7, \\(( \\beta_{00} ,\\beta_{10}, \\beta_0, \\beta_1, \\beta_2) = (-2, 2, -2, 2, 1)\\). figure illustrates QQ plots corresponding modelzero1 modelzero2. Given true underlying distribution y follows zero-inflated Poisson distribution, anticipate observing deviations diagonal line QQ plot modelzero2. expected, left QQ plot aligns closely along diagonal line. However, right panel, left right tails QQ plot modelzero2 deviate diagonal line, indicating assumption Poisson distribution may accurate. Moreover, noticeable S-shaped pattern arises due overdispersion. discrepancies observed QQ plot modelzero2 suggest Poisson distribution assumption well-supported data. finding emphasizes importance considering alternative distributional assumptions, zero-inflated Poisson distribution, may better capture characteristics simulated data. Similarly, generate zero-inflated negative binomial random variable denoted y, dependent variables x1 x2. simulation involves modeling occurrence zeros variable y zero-inflated negative binomial distribution.  figure also presents QQ plots corresponding model.negbin1 model.negbin2. contrast simulation setting, model.negbin2 assumes negative binomial distribution rather zero-inflated negative binomial distribution. Consequently, right panel figure displays deviations left right tails. deviations may substantial, comparison left panel suggests QQ plots lean towards supporting zero-inflated negative binomial regression.","code":"## Zero-Inflated Poisson library(assessor) library(pscl) n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 beta00 <- -2 beta10 <- 2  # Mean of Poisson part lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) # Excess zero probability p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1))) ## simulate outcomes y0 <- rbinom(n, size = 1, prob = 1 - p0) y1 <- rpois(n, lambda1) y <- ifelse(y0 == 0, 0, y1) par(mfrow=c(1,2)) ## True model modelzero1 <- zeroinfl(y ~ x1 + x2 | x1, dist = \"poisson\", link = \"logit\") resid1 <- resid_zeroinfl(modelzero1, plot = TRUE, scale = \"uniform\")  ## Zero inflation modelzero2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid2 <- resid_disc(modelzero2, plot = TRUE, scale = \"normal\") ## Zero-inflated Negative Binomial library(assessor) library(pscl) library(MASS) n <- 500 set.seed(1234)  # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 beta00 <- -2 beta10 <- 2 size1 <- 2  # Mean of Poisson part lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) # Excess zero probability p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1))) ## simulate outcomes y0 <- rbinom(n, size = 1, prob = 1 - p0) y1 <- rnbinom(n, size=size1, mu= lambda1) y <- ifelse(y0 == 0, 0, y1) model.negbin1 <- zeroinfl(y ~ x1 + x2 | x1, dist = \"negbin\") model.negbin2 <- glm.nb(y ~ x1 + x2)  par(mfrow=c(1,2)) resid.zero1 <- resid_zeroinfl(model.negbin1, plot = TRUE, scale = \"uniform\") resid.zero2 <- resid_disc(model.negbin2, plot = TRUE, scale = \"normal\")"},{"path":"https://jhlee1408.github.io/assessor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lu Yang. Author. Jeonghwan Lee. Maintainer, author.","code":""},{"path":"https://jhlee1408.github.io/assessor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yang L, Lee J (2024). assessor: Assessment Tools Regression Models Discrete Semicontinuous Outcomes. R package version 1.0.0, https://jhlee1408.github.io/assessor/, https://github.com/jhlee1408/assessor.","code":"@Manual{,   title = {assessor: Assessment Tools for Regression Models with Discrete and Semicontinuous Outcomes},   author = {Lu Yang and Jeonghwan Lee},   year = {2024},   note = {R package version 1.0.0, https://jhlee1408.github.io/assessor/},   url = {https://github.com/jhlee1408/assessor}, }"},{"path":[]},{"path":"https://jhlee1408.github.io/assessor/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Assessing assumptions","text":"goal assessor provide assessment tools regression models discrete semicontinuous outcomes proposed Yang (2023) Yang(2024). calculates double probability integral transform (DPIT) residuals, constructs QQ plots residuals ordered curve assessing mean structures.","code":""},{"path":"https://jhlee1408.github.io/assessor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Assessing assumptions","text":"Install latest release CRAN: Also, can install development version assessor GitHub :","code":"install.package('assessor') # install.packages(\"devtools\") devtools::install_github(\"jhlee1408/assessor\")"},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordered curve for assessing mean structures — ord_curve","title":"Ordered curve for assessing mean structures — ord_curve","text":"Creates plot assess mean structure regression models. plot compares cumulative sum response variable hypothesized value. Deviation diagonal suggests possibility mean structure model incorrect.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordered curve for assessing mean structures — ord_curve","text":"","code":"ord_curve(model, thr)"},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordered curve for assessing mean structures — ord_curve","text":"model Regression model object (e.g.,lm, glm, glm.nb, polr, lm) thr Threshold variable (e.g., predictor, fitted values, variable included covariate)","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordered curve for assessing mean structures — ord_curve","text":"x-axis: \\(\\hat L_1(t)\\) y-axis: \\(\\hat L_2(t)\\) defined Details.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordered curve for assessing mean structures — ord_curve","text":"ordered curve plots $$\\hat{L}_1(t)=\\frac{\\sum_{=1}^n\\left[Y_i1(Z_i\\leq t)\\right]}{\\sum_{=1}^nY_i}$$ $$\\hat{L}_2(t)=\\frac{\\sum_{=1}^n\\left[\\hat{\\lambda}_i1(Z_i\\leq t)\\right]}{\\sum_{=1}^n\\hat{\\lambda}_i},$$ \\(\\hat{\\lambda}_i\\) fitted mean, \\(Z_i\\) threshold variable. mean structure correctly specified model, \\(\\hat L_1(t)\\) \\(\\hat L_2(t)\\) close . curve distant diagonal, suggests incorrectness mean structure. Moreover, curve diagonal, summation response larger fitted mean, implies mean underestimated, vice versa. role thr (threshold variable \\(Z\\)) determine rule  accumulating \\(\\hat{\\lambda}_i\\) \\(Y_i\\), \\(=1,\\ldots,n\\) ordered curve. candidate thr function predictors single predictor (e.g., x1), linear combination predictor (e.g., x1+x2), fitted values (e.g., fitted(model)). can also variable considered included mean function. variable  leads large discrepancy ordered curve diagonal, including variable mean function considered. details, see reference paper.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ordered curve for assessing mean structures — ord_curve","text":"Yang, Lu. \"Double Probability Integral Transform Residuals Regression Models Discrete Outcomes.\" arXiv preprint arXiv:2308.15596 (2023).","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/ord_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordered curve for assessing mean structures — ord_curve","text":"","code":"## Binary example of ordered curve n <- 500 set.seed(1234) x1 <- rnorm(n, 1, 1) x2 <- rbinom(n, 1, 0.7) beta0 <- -5 beta1 <- 2 beta2 <- 1 beta3 <- 3 q1 <- 1 / (1 + exp(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x1 * x2)) y1 <- rbinom(n, size = 1, prob = 1 - q1)  ## True Model model0 <- glm(y1 ~ x1 * x2, family = binomial(link = \"logit\")) ord_curve(model0, thr = model0$fitted.values) # set the threshold as fitted values   ## Missing a covariate model1 <- glm(y1 ~ x1, family = binomial(link = \"logit\")) ord_curve(model1, thr = x2) # set the threshold as a covariate   ## Poisson example of ordered curve n <- 500 set.seed(1234) x1 <- rnorm(n) x2 <- rnorm(n) beta0 <- 0 beta1 <- 2 beta2 <- 1 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2)  y <- rpois(n, lambda1)  ## True Model poismodel1 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) ord_curve(poismodel1, thr = poismodel1$fitted.values)   ## Missing a covariate poismodel2 <- glm(y ~ x1, family = poisson(link = \"log\")) ord_curve(poismodel2, thr = poismodel2$fitted.values)  ord_curve(poismodel2, thr = x2)"},{"path":"https://jhlee1408.github.io/assessor/reference/qqresid.html","id":null,"dir":"Reference","previous_headings":"","what":"QQ-plots of DPIT residuals — qqresid","title":"QQ-plots of DPIT residuals — qqresid","text":"Makes QQ-plot DPIT residuals calculated resid_disc(), resid_semiconti() resid_zeroinfl(). plot close diagonal model correctly specified. Note function return residuals. get residuals QQ-plot, use resid_disc(), resid_semiconti() resid_zeroinfl().","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/qqresid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QQ-plots of DPIT residuals — qqresid","text":"","code":"qqresid(model, scale=\"normal\")"},{"path":"https://jhlee1408.github.io/assessor/reference/qqresid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QQ-plots of DPIT residuals — qqresid","text":"model Fitted model object (e.g., glm(), glm.nb(), zeroinfl(), polr()) scale can choose scale residuals normal uniform scales. sample quantiles residuals plotted theoretical quantiles standard normal distribution normal scale, theoretical quantiles uniform (0,1) distribution uniform scale. defalut scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/qqresid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QQ-plots of DPIT residuals — qqresid","text":"QQ plot. x-axis: Theoretical quantiles y-axis: Sample quantiles generated DPIT residuals","code":""},{"path":[]},{"path":"https://jhlee1408.github.io/assessor/reference/qqresid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QQ-plots of DPIT residuals — qqresid","text":"","code":"n <- 100 b <- c(2, 1, -2) x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) y <- rpois(n, exp(b[1] + b[2] * x1 + b[3] * x2))  m1 <- glm(y ~ x1 + x2, family = poisson) qqresid(m1, scale = \"normal\")  qqresid(m1, scale = \"uniform\")"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals for regression models with two-part outcomes — resid_2pm","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"Calculates DPIT proposed residuals model semi-continuous outcomes. resid_2pm can used either model0 model1 part0 part1 arguments.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"","code":"resid_2pm(model0, model1, y, part0, part1, plot=TRUE, scale = \"normal\")"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"model0 Model object 0 outcomes (e.g., logistic regression) model1 Model object continuous part (gamma regression) y Semicontinuous outcome variables part0 Alternative argument model0. One can supply sequence probabilities \\(P(Y_i=0),~=1,\\ldots,n\\). part1 Alternative argument model1. One can fit regression model positive data supply probability integral transform. Note length part1 number positive values y can shorter part0. plot logical value indicating whether return QQ-plot scale can choose scale residuals among normal uniform scales. default scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"Residuals. plot=TRUE, also produces QQ plot.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"DPIT residuals regression models semi-continuous outcomes $$\\hat{r}_i=\\frac{\\hat{F}(Y_i|\\mathbf{X}_i)}{n}\\sum_{j=1}^n1\\left(\\hat{p}_0(\\mathbf{X}_j)\\leq \\hat{F}(Y_i|\\mathbf{X}_i)\\right), =1,\\ldots,n,$$ \\(\\hat{p}_0(\\mathbf{X}_i)\\) fitted probability zero, \\(\\hat{F}(\\cdot|\\mathbf{X}_i)\\)  fitted cumulative distribution function \\(\\)th observation. Furthermore, $$\\hat{F}(y|\\mathbf{x})=\\hat{p}_0(\\mathbf{x})+\\left(1-\\hat{p}_0(\\mathbf{x})\\right)\\hat{G}(y|\\mathbf{x})$$ \\(\\hat{G}\\) fitted cumulative distribution positive data. two-part models, probability zero can modeled using logistic regression, model0, positive observations can modeled using gamma regression, model1. Users can choose use different models supply resulting probability transforms. part0 sequence fitted probabilities zeros \\(\\hat{p}_0(\\mathbf{X}_i) ,~=1,\\ldots,n\\). part1 probability integral transform positive part \\(\\hat{G}(Y_i|\\mathbf{X}_i)\\). Note length part1 number positive values y can shorter part0.","code":""},{"path":[]},{"path":"https://jhlee1408.github.io/assessor/reference/resid_2pm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals for regression models with two-part outcomes — resid_2pm","text":"","code":"library(MASS) n <- 500 beta10 <- 1 beta11 <- -2 beta12 <- -1 beta13 <- -1 beta14 <- -1 beta15 <- -2 x11 <- rnorm(n) x12 <- rbinom(n, size = 1, prob = 0.4)  p1 <- 1 / (1 + exp(-(beta10 + x11 * beta11 + x12 * beta12))) lambda1 <- exp(beta13 + beta14 * x11 + beta15 * x12) y2 <- rgamma(n, scale = lambda1 / 2, shape = 2) y <- rep(0, n) u <- runif(n, 0, 1) ind1 <- which(u >= p1) y[ind1] <- y2[ind1]  # models as input mgamma <- glm(y[ind1] ~ x11[ind1] + x12[ind1], family = Gamma(link = \"log\")) m10 <- glm(y == 0 ~ x12 + x11, family = binomial(link = \"logit\")) resid.model <- resid_2pm(model0 = m10, model1 = mgamma, y = y)  # PIT as input cdfgamma <- pgamma(y[ind1],   scale = mgamma$fitted.values * gamma.dispersion(mgamma),   shape = 1 / gamma.dispersion(mgamma) ) p1f <- m10$fitted.values resid.pit <- resid_2pm(y = y, part0 = p1f, part1 = cdfgamma)"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals for regression models with discrete outcomes — resid_disc","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"Calculates DPIT residuals regression models discrete outcomes. Specifically, model assumption GLMs binary, ordinal, Poisson, negative binomial outcomes can assessed using resid_disc().","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"","code":"resid_disc(model, plot=TRUE, scale=\"normal\")"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"model Model object (e.g., glm, glm.nb, polr) plot logical value indicating whether return QQ-plot scale can choose scale residuals among normal uniform scales. sample quantiles residuals plotted theoretical quantiles standard normal distribution normal scale, theoretical quantiles uniform (0,1) distribution uniform scale. defalut scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"DPIT residuals. plot=TRUE, also produces QQ plot.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"DPIT residual \\(\\)th observation defined follows: $$\\hat{r}(Y_i|X_i) = \\hat{G}\\bigg(\\hat{F}(Y_i|\\mathbf{X}_i)\\bigg)$$ $$\\hat{G}(s) = \\frac{1}{n-1}\\sum_{j=1, j \\neq }^{n}\\hat{F}\\bigg(\\hat{F}^{(-1)}(\\mathbf{X}_j)\\bigg|\\mathbf{X}_j\\bigg)$$ \\(\\hat{F}\\) refers fitted cumulative distribution function. scale=\"uniform\", DPIT residuals closely follow uniform distribution, otherwise implies model deficiency. scale=\"normal\", applies normal quantile transformation DPIT residuals $$\\Phi^{-1}\\left[\\hat{r}(Y_i|\\mathbf{X}_i)\\right],=1,\\ldots,n.$$ null pattern standard normal distribution case. Check reference details.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"Yang, Lu. \"Double Probability Integral Transform Residuals Regression Models Discrete Outcomes.\" arXiv preprint arXiv:2308.15596 (2023).","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_disc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals for regression models with discrete outcomes — resid_disc","text":"","code":"library(MASS) n <- 500 set.seed(1234) ## Negative Binomial example # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) ### Parameters beta0 <- -2 beta1 <- 2 beta2 <- 1 size1 <- 2 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) # generate outcomes y <- rnbinom(n, mu = lambda1, size = size1)  # True model model1 <- glm.nb(y ~ x1 + x2) resid.nb1 <- resid_disc(model1, plot = TRUE, scale = \"uniform\")   # Overdispersion model2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid.nb2 <- resid_disc(model2, plot = TRUE, scale = \"normal\")   ## Binary example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n, 1, 1) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -5 beta1 <- 2 beta2 <- 1 beta3 <- 3 q1 <- 1 / (1 + exp(beta0 + beta1 * x1 + beta2 * x2 + beta3 * x1 * x2)) y1 <- rbinom(n, size = 1, prob = 1 - q1)  # True model model01 <- glm(y1 ~ x1 * x2, family = binomial(link = \"logit\")) resid.bin1 <- resid_disc(model01, plot = TRUE)   # Missing covariates model02 <- glm(y1 ~ x1, family = binomial(link = \"logit\")) resid.bin2 <- resid_disc(model02, plot = TRUE)   ## Poisson example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) y <- rpois(n, lambda1)  # True model poismodel1 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid.poi1 <- resid_disc(poismodel1, plot = TRUE)   # Enlarge three outcomes y <- rpois(n, lambda1) + c(rep(0, (n - 3)), c(10, 15, 20)) poismodel2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid.poi2 <- resid_disc(poismodel2, plot = TRUE)   ## Ordinal example n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n, mean = 2) # Coefficient beta1 <- 3  # True model p0 <- plogis(1, location = beta1 * x1) p1 <- plogis(4, location = beta1 * x1) - p0 p2 <- 1 - p0 - p1 genemult <- function(p) {   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3])) } test <- apply(cbind(p0, p1, p2), 1, genemult) y1 <- rep(0, n) y1[which(test[1, ] == 1)] <- 0 y1[which(test[2, ] == 1)] <- 1 y1[which(test[3, ] == 1)] <- 2 multimodel <- polr(as.factor(y1) ~ x1, method = \"logistic\") resid.ord1 <- resid_disc(multimodel, plot = TRUE)   ## Non-Proportionality n <- 500 set.seed(1234) x1 <- rnorm(n, mean = 2) beta1 <- 3 beta2 <- 1 p0 <- plogis(1, location = beta1 * x1) p1 <- plogis(4, location = beta2 * x1) - p0 p2 <- 1 - p0 - p1 genemult <- function(p) {   rmultinom(1, size = 1, prob = c(p[1], p[2], p[3])) } test <- apply(cbind(p0, p1, p2), 1, genemult) y1 <- rep(0, n) y1[which(test[1, ] == 1)] <- 0 y1[which(test[2, ] == 1)] <- 1 y1[which(test[3, ] == 1)] <- 2 multimodel <- polr(as.factor(y1) ~ x1, method = \"logistic\") resid.ord2 <- resid_disc(multimodel, plot = TRUE)"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":null,"dir":"Reference","previous_headings":"","what":"Quasi Emprical residuals functions — resid_quasi","title":"Quasi Emprical residuals functions — resid_quasi","text":"Draw QQ-plot regression models discrete outcomes using quasi-empirical residual distribution functions. Specifically, model assumption GLMs binary, ordinal, Poisson, negative binomial, zero-inlated Poisson, zero-inflated negative binomial outcomes can applicable resid_quasi().","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quasi Emprical residuals functions — resid_quasi","text":"","code":"resid_quasi(model)"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quasi Emprical residuals functions — resid_quasi","text":"model Model object (e.g., glm, glm.nb, polr, zeroinfl)","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quasi Emprical residuals functions — resid_quasi","text":"QQ plot. x-axis: Theoretical quantiles y-axis: Sample quantiles","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quasi Emprical residuals functions — resid_quasi","text":"quasi-empirical residual distribution function defined follows: $$\\hat{U}(s; \\beta) = \\sum_{=1}^{n} W_{n}(s;\\mathbf{X}_{},\\beta) 1[F(Y_{}| X_{}) < H(s;X_{})]$$","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quasi Emprical residuals functions — resid_quasi","text":"Lu Yang (2021). Assessment Regression Models Discrete Outcomes Using Quasi-Empirical Residual Distribution Functions, Journal Computational Graphical Statistics, 30(4), 1019-1035.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_quasi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quasi Emprical residuals functions — resid_quasi","text":"","code":"## Negative Binomial example # Covariates x1 <- rnorm(n) #> Error in eval(expr, envir, enclos): object 'n' not found x2 <- rbinom(n, 1, 0.7) #> Error in eval(expr, envir, enclos): object 'n' not found ### Parameters beta0 <- -2 beta1 <- 2 beta2 <- 1 size1 <- 2 lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) #> Error in eval(expr, envir, enclos): object 'x1' not found # generate outcomes y <- rnbinom(n, mu = lambda1, size = size1) #> Error in eval(expr, envir, enclos): object 'n' not found  # True model model1 <- glm.nb(y ~ x1 + x2) #> Error in eval(predvars, data, env): object 'y' not found resid.nb1 <- resid_quasi(model1) #> Error in eval(expr, envir, enclos): object 'model1' not found  # Overdispersion model2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) #> Error in eval(predvars, data, env): object 'y' not found resid.nb2 <- resid_quasi(model2) #> Error in eval(expr, envir, enclos): object 'model2' not found  ## Zero inflated Poisson example library(pscl) #> Classes and Methods for R originally developed in the #> Political Science Computational Laboratory #> Department of Political Science #> Stanford University (2002-2015), #> by and under the direction of Simon Jackman. #> hurdle and zeroinfl functions by Achim Zeileis. n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 beta00 <- -2 beta10 <- 2  # Mean of Poisson part lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) # Excess zero probability p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1))) ## simulate outcomes y0 <- rbinom(n, size = 1, prob = 1 - p0) y1 <- rpois(n, lambda1) y <- ifelse(y0 == 0, 0, y1) ## True model modelzero1 <- zeroinfl(y ~ x1 + x2 | x1, dist = \"poisson\", link = \"logit\") resid.zero1 <- resid_quasi(modelzero1) #>  Multistart 1 of 1 | Multistart 1 of 1 | Multistart 1 of 1 | Multistart 1 of 1 / Multistart 1 of 1 | Multistart 1 of 1 |                     #> Error in (function (u, y, pzero, meanpoisson) {    n <- length(y)    inv1 <- ifelse(u < (pzero + (1 - pzero) * (ppois(0, lambda = meanpoisson))),         0, qpois(pmax((u - pzero)/(1 - pzero), 0), lambda = meanpoisson))    inv1m <- ifelse(inv1 > 0, inv1 - 1, 0)    n1 <- cbind(inv1, inv1m)    p1 <- cbind((pzero + (1 - pzero) * (ppois(inv1, meanpoisson))),         (pzero + (1 - pzero) * (ppois(inv1m, meanpoisson))))    ind1 <- apply(abs(p1 - u), 1, which.min)    wei <- 1 * ((p1[cbind(1:n, ind1)] - u)^2 < 5 * h^2) * (1 -         ((p1[cbind(1:n, ind1)] - u)^2)/h^2/5)    l <- sum(wei * 1 * (y <= n1[cbind(1:n, ind1)]))/sum(wei)    l})(u = dots[[1L]][[1L]], y = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 14, 0, 0, 2, 0, 0, 1, 27, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 5, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 3, 0, 0, 1, 1, 0, 0, 5, 1, 0, 0, 0, 4, 0, 1, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 3, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 3, 10, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 11, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0), pzero = c(`1` = 0.00464890611718853, `2` = 0.123966635655381, `3` = 0.474761447138555, `4` = 0.000341162125081515, `5` = 0.167029749356935, `6` = 0.19309034689781, `7` = 0.0195793611547851, `8` = 0.0208584126502436, `9` = 0.020038339766728, `10` = 0.00958431354889098, `11` = 0.024378772597109, `12` = 0.00748782894615409, `13` = 0.0124127054115095, `14` = 0.0798229489874923, `15` = 0.404164292459482, `16` = 0.0548738006243024, `17` = 0.0225973536785416, `18` = 0.00913366255936799, `19` = 0.0108088625451435, `20` = 0.950651323449703, `21` = 0.0923929665846282, `22` = 0.0236521176484788, `23` = 0.0264637502366074, `24` = 0.176997431729895, `25` = 0.0149659507289853, `26` = 0.00267653253470873, `27` = 0.218881722693914, `28` = 0.00706842469286519, `29` = 0.0673797687186908, `30` = 0.00863301708322876, `31` = 0.485002068751245, `32` = 0.0244663479070843, `33` = 0.014442681571636, `34` = 0.0230975777214559, `35` = 0.00176789071557741, `36` = 0.0050877266508649, `37` = 0.00049912111125324, `38` = 0.00342165979800152, `39` = 0.036646702016114, `40` = 0.0250037543048813, `41` = 0.676510939430918, `42` = 0.00637867851218942, `43` = 0.0103709152604958, `44` = 0.037771980051281, `45` = 0.00755724493190849, `46` = 0.00801558025677461, `47` = 0.00583944071724852, `48` = 0.00419490418545866, `49` = 0.0219558651051509, `50` = 0.0233272352786366, `51` = 0.00117799089650089, `52` = 0.0192583890726101, `53` = 0.00581851594480606, `54` = 0.00721001793329832, `55` = 0.0489939670529373, `56` = 0.21432004273897, `57` = 0.767363898245362, `58` = 0.0124946715614545, `59` = 0.749733201922578, `60` = 0.00520311854689982, `61` = 0.252719613276044, `62` = 0.963180099846118, `63` = 0.0646011441829046, `64` = 0.0158041522005372, `65` = 0.0684757409521698, `66` = 0.816155601870463, `67` = 0.00543654152191217, `68` = 0.634164390758298, `69` = 0.613537094204582, `70` = 0.13946729853961, `71` = 0.0706314324255514, `72` = 0.0255946426259245, `73` = 0.0312173271895007, `74` = 0.249134069108651, `75` = 0.896988174429192, `76` = 0.0499568728458554, `77` = 0.00305346402409921, `78` = 0.0139873704944873, `79` = 0.119262283330441, `80` = 0.0348440678423341, `81` = 0.0473629289091464, `82` = 0.0481777595824916, `83` = 0.00318490414681038, `84` = 0.0477796537734793, `85` = 0.345426221248817, `86` = 0.270931131824333, `87` = 0.209310782541288, `88` = 0.0287969570422539, `89` = 0.0459521773668378, `90` = 0.00478413668724586, `91` = 0.0620930428093712, `92` = 0.118524319441719, `93` = 0.790359670175893, `94` = 0.427614205803018, `95` = 0.0233936305477223, `96` = 0.144811973378498, `97` = 0.00548646093177779, `98` = 0.360099427975421, `99` = 0.411613110691137, `100` = 0.907294001060343, `101` = 0.16241383633849, `102` = 0.0245143600126342, `103` = 0.0800823499864141, `104` = 0.0230344223684686, `105` = 0.0110868406344042, `106` = 0.0989308744640771, `107` = 0.00944944481199982, `108` = 0.0991761482673073, `109` = 0.144646426218558, `110` = 0.0622341967740906, `111` = 0.0455168690400271, `112` = 0.0165561867604776, `113` = 0.00580686241825783, `114` = 0.344928635072408, `115` = 0.0730006924870309, `116` = 0.335575566325686, `117` = 0.00426944644160127, `118` = 0.0993489329040526, `119` = 0.259981005770405, `120` = 0.0657892048976758, `121` = 0.0459724903818793, `122` = 0.0122544836785898, `123` = 0.894388702519476, `124` = 0.295594288283087, `125` = 0.831850106204838, `126` = 0.0824959730376504, `127` = 0.0172300438847864, `128` = 0.00230561120607702, `129` = 0.0170484862831846, `130` = 0.111761520846082, `131` = 0.434476177466094, `132` = 0.117938408858604, `133` = 0.00503762211967855, `134` = 0.258017732015736, `135` = 0.00168472023862759, `136` = 0.031264037623606, `137` = 0.0349168401465618, `138` = 0.000849895149645524, `139` = 0.382544795115527, `140` = 0.0175654030710965, `141` = 0.0335556733077217, `142` = 0.648602424585826, `143` = 0.244176171135877, `144` = 0.0550951370170463, `145` = 0.195864509953995, `146` = 0.157702633130675, `147` = 0.773475737395213, `148` = 0.123583893094747, `149` = 0.193167951078272, `150` = 0.142550772403136, `151` = 0.0304813415545685, `152` = 0.0856019013656751, `153` = 0.763621543689467, `154` = 0.00990457599561397, `155` = 0.0900447685423819, `156` = 0.63112233885438, `157` = 0.0418071889651865, `158` = 0.00660480601444312, `159` = 0.0100363289765815, `160` = 0.0296181532442273, `161` = 0.0105616381288737, `162` = 0.0394767778991717, `163` = 0.0280552851349264, `164` = 0.0468204808297205, `165` = 0.160093146018978, `166` = 0.239106053643753, `167` = 0.779595697248194, `168` = 0.0600464101051849, `169` = 0.0345530847743159, `170` = 0.687231461497213, `171` = 0.789736654291078, `172` = 0.0763149456281175, `173` = 0.0336586088935772, `174` = 0.00113498507398265, `175` = 0.656994589153323, `176` = 0.0107987757445175, `177` = 0.00562412389989171, `178` = 0.987884680923288, `179` = 0.113766067727965, `180` = 0.0648099814386435, `181` = 0.000140387853774312, `182` = 0.0561379875740718, `183` = 0.413347684485219, `184` = 0.162209317813684, `185` = 0.378355284203293, `186` = 0.877110822134229, `187` = 0.523360101592028, `188` = 0.0227129724320309, `189` = 0.273924074713528, `190` = 0.0452697711987539, `191` = 0.0212639823387591, `192` = 0.000105696894690186, `193` = 0.012041060194298, `194` = 0.186643632253264, `195` = 0.915971992473192, `196` = 0.191178198733719, `197` = 0.237261961393007, `198` = 0.00806342776068624, `199` = 0.098046546608536, `200` = 0.000630578766327892, `201` = 0.185742622291615, `202` = 0.27055007284368, `203` = 0.102790661110527, `204` = 0.27235174353311, `205` = 0.132769762749397, `206` = 0.300382215712522, `207` = 0.837636084473437, `208` = 0.49078062074653, `209` = 0.0746188005070857, `210` = 0.00574508579190741, `211` = 0.163521623884925, `212` = 0.0289578422725025, `213` = 0.698229116820939, `214` = 0.00185944082787248, `215` = 0.0279719415622057, `216` = 0.164767070877068, `217` = 0.0501384226445691, `218` = 0.0182408535518056, `219` = 0.0358101646859412, `220` = 0.241161754838868, `221` = 0.369131905296668, `222` = 0.254295538676163, `223` = 0.932839058413698, `224` = 0.525875278487249, `225` = 0.126554883620689, `226` = 0.0161605777033884, `227` = 0.983932050708313, `228` = 0.261863868378731, `229` = 0.0152877223846584, `230` = 0.102998133603788, `231` = 0.0342817407780698, `232` = 0.0382694013515332, `233` = 0.00868123782273011, `234` = 0.0891237401714214, `235` = 0.134761079116584, `236` = 0.00625037231765096, `237` = 4.44098928044044e-05, `238` = 0.0399821280347445, `239` = 0.0741211528255672, `240` = 0.226646187053328, `241` = 0.0789290492202112, `242` = 0.162062600285077, `243` = 0.0059681701115446, `244` = 0.277132475450627, `245` = 0.280697115658377, `246` = 0.117675944081043, `247` = 0.628520752759021, `248` = 0.159295262508671, `249` = 0.120743054209842, `250` = 0.121643561070399, `251` = 0.169540176210701, `252` = 0.460851221589598, `253` = 0.17453441646283, `254` = 0.255598813867979, `255` = 0.00546436997925286, `256` = 0.0309423740260223, `257` = 0.690169428673269, `258` = 0.00447326266808636, `259` = 0.119215618661502, `260` = 0.159459757651408, `261` = 0.413220419273826, `262` = 0.0324672530495067, `263` = 0.0972308315502765, `264` = 0.00129950030049718, `265` = 0.14005386433193, `266` = 0.0159142000364152, `267` = 0.0414382113305471, `268` = 0.00485869440795945, `269` = 0.153375994246884, `270` = 0.25707974041751, `271` = 0.0358186690611378, `272` = 0.832107960619125, `273` = 0.258830200637328, `274` = 0.398168786574331, `275` = 0.892472466956376, `276` = 0.0164798933677673, `277` = 0.324137132734762, `278` = 0.419237566296587, `279` = 0.0686862144957919, `280` = 0.134732177831069, `281` = 0.0072618496191623, `282` = 0.180565965343401, `283` = 0.0147223348030958, `284` = 0.32669126074241, `285` = 0.0114599166456514, `286` = 0.134824656480434, `287` = 0.0105815248115519, `288` = 0.0407935242145817, `289` = 0.00210564165297453, `290` = 0.0913092413701808, `291` = 0.418601466618553, `292` = 0.102311373401049, `293` = 0.00129066122375201, `294` = 0.0176583479491885, `295` = 0.770720921260551, `296` = 0.827169951141354, `297` = 0.00500217662463336, `298` = 0.0312048678943781, `299` = 0.144265093128423, `300` = 0.134760002657884, `301` = 0.0193505658113389, `302` = 0.00829879255684217, `303` = 0.0471933316504443, `304` = 0.432285680201171, `305` = 0.0731974968824147, `306` = 0.0165577406678002, `307` = 0.0229365623387119, `308` = 0.753372278530738, `309` = 0.0260868054257358, `310` = 0.301694598554196, `311` = 0.687583488248894, `312` = 0.171730031187458, `313` = 0.02760135989667, `314` = 0.0638771978561841, `315` = 0.0235676798345922, `316` = 0.556798600460026, `317` = 0.0503778486574173, `318` = 0.724856828793947, `319` = 0.0201668624744327, `320` = 0.0166293942505486, `321` = 0.0941504253138797, `322` = 0.0732851559436136, `323` = 0.0229325819989523, `324` = 0.00197225933966251, `325` = 0.0742077074427128, `326` = 0.0142111112273167, `327` = 0.473712868457281, `328` = 0.00831001880309784, `329` = 0.498890745326974, `330` = 0.0165571869965797, `331` = 0.127768940059059, `332` = 0.371023192520553, `333` = 0.0222082161964467, `334` = 0.211004716464337, `335` = 0.0575941862931525, `336` = 0.00547888231239231, `337` = 0.0386624299129666, `338` = 0.755669796464838, `339` = 0.0437344719877125, `340` = 0.0112957506725571, `341` = 0.0619775103731248, `342` = 0.137730467615711, `343` = 0.401859282046875, `344` = 0.508929539969905, `345` = 0.0861254641013029, `346` = 0.520761041451513, `347` = 0.0127551291315754, `348` = 0.000342091468817575, `349` = 0.0246816846478406, `350` = 0.0223527189275846, `351` = 0.000365216394446048, `352` = 0.214094144407383, `353` = 0.0122026234461587, `354` = 0.0426029281174976, `355` = 0.0019466185633069, `356` = 0.208371833822554, `357` = 0.852304612342615, `358` = 0.00984874527965509, `359` = 0.0546035066610133, `360` = 0.86817104217454, `361` = 0.390039596610244, `362` = 0.858508691838896, `363` = 0.0688240303452124, `364` = 0.0500811647894883, `365` = 0.0226673864461345, `366` = 0.668962039929503, `367` = 0.00388218404154302, `368` = 0.131618672495521, `369` = 0.063014721559323, `370` = 0.929655697033536, `371` = 0.0181635465974979, `372` = 0.00232685041912072, `373` = 0.113213651771587, `374` = 0.0639257080695384, `375` = 0.0107609766716641, `376` = 0.0920472678020714, `377` = 0.0382000694908438, `378` = 0.0154813042626779, `379` = 0.191228414816049, `380` = 0.0337330526321804, `381` = 0.00110226503484312, `382` = 0.000168899421801897, `383` = 0.0193233245665732, `384` = 0.678865152889295, `385` = 0.339165506785146, `386` = 0.549606527444821, `387` = 0.416959401072748, `388` = 0.133853740280799, `389` = 0.00233875215901009, `390` = 0.107119249768372, `391` = 0.745971595904889, `392` = 3.05430872484635e-05, `393` = 0.012269911898954, `394` = 0.485097970382315, `395` = 0.201343514784187, `396` = 0.31453579040217, `397` = 0.176165542888883, `398` = 0.20509684266186, `399` = 0.0718094119719627, `400` = 0.00902423106227283, `401` = 0.00444357038820981, `402` = 0.0751742596797979, `403` = 0.0276216421541125, `404` = 0.00938300787064091, `405` = 0.163327949786947, `406` = 0.0961909135454226, `407` = 0.683404626833797, `408` = 0.00565324439024697, `409` = 0.0222558812654246, `410` = 0.0592405123803137, `411` = 0.00293623124974766, `412` = 0.0374324778189569, `413` = 0.0144842410678488, `414` = 0.0005376782805984, `415` = 0.0375044668827122, `416` = 0.0214560456562114, `417` = 0.502640420520967, `418` = 0.0183267320540791, `419` = 0.212182682373344, `420` = 0.0940519247002433, `421` = 0.0043426202455498, `422` = 0.150183743676312, `423` = 0.0553763945224494, `424` = 0.098741095511901, `425` = 0.253347780023444, `426` = 0.0885875225255686, `427` = 0.74068069155821, `428` = 0.0888830459631542, `429` = 0.00417562495231224, `430` = 0.291478953116429, `431` = 0.00448352891154185, `432` = 0.000909139465087308, `433` = 0.0114988822799502, `434` = 0.0133343545875581, `435` = 0.0181851877308288, `436` = 0.750099468300335, `437` = 0.762314552624634, `438` = 0.284050677032857, `439` = 0.00399031914187594, `440` = 0.0731226995416088, `441` = 0.186401878074929, `442` = 0.0517727508056948, `443` = 0.0999093858639239, `444` = 0.00846079379525856, `445` = 0.00386638358428661, `446` = 0.655181688004165, `447` = 0.121478866107387, `448` = 0.0284350827770291, `449` = 0.136406774688767, `450` = 0.895322452264282, `451` = 0.146848895718339, `452` = 0.657068242509315, `453` = 0.63401358539078, `454` = 0.0285127262707119, `455` = 0.301387276490767, `456` = 0.0164766455408817, `457` = 0.00252487910087271, `458` = 0.00470667595247869, `459` = 0.0504695059085831, `460` = 0.822943795080358, `461` = 0.0869038325567316, `462` = 0.0116857657715758, `463` = 0.112694071268066, `464` = 0.271097501998482, `465` = 0.00379986588473195, `466` = 0.00658527463803539, `467` = 0.000862947624654264, `468` = 0.00402954468324864, `469` = 0.00964116905160259, `470` = 0.0368401044483781, `471` = 0.656389347081372, `472` = 0.365644343755297, `473` = 0.122859233271227, `474` = 0.0199397860474049, `475` = 0.0638489936315011, `476` = 0.20840520680146, `477` = 0.0229541234942456, `478` = 0.460249648504962, `479` = 0.482222441547117, `480` = 0.00510070749667726, `481` = 0.013266984280924, `482` = 0.54487273779064, `483` = 0.00154719771564266, `484` = 0.164041530944295, `485` = 0.113413812888282, `486` = 0.991428224994475, `487` = 0.000141209229170588, `488` = 0.0107201863719906, `489` = 0.260362416179377, `490` = 0.77806027281317, `491` = 0.339968202667359, `492` = 0.00280100296946739, `493` = 0.927761165068312, `494` = 0.00131748281737417, `495` = 0.00576392324544567, `496` = 0.0634472817077898, `497` = 0.925606733995879, `498` = 0.193183696064947, `499` = 0.28606664671996, `500` = 0.798654703436228), meanpoisson = c(`1` = 0.0116758879907561, `2` = 0.603382091082348, `3` = 2.98678426419642, `4` = 0.00333283781933695, `5` = 0.298945493153633, `6` = 0.949239893314804, `7` = 0.111458503184556, `8` = 0.11784371319533, `9` = 0.0417254018443586, `10` = 0.0218857906857305, `11` = 0.135230327469617, `12` = 0.0176564912589365, `13` = 0.0747594506080379, `14` = 0.395625684113104, `15` = 2.33162848226254, `16` = 0.279819854876224, `17` = 0.126464110324238, `18` = 0.057216226659166, `19` = 0.0662571780828532, `20` = 15.3318222116331, `21` = 0.454167349199824, `22` = 0.131661934883306, `23` = 0.14541695330034, `24` = 0.317551111164585, `25` = 0.0880449549062529, `26` = 0.0197380533087821, `27` = 0.398969388620996, `28` = 0.0457849095677207, `29` = 0.3378886742069, `30` = 0.0544770583275599, `31` = 3.09437676762696, `32` = 0.0497603231055464, `33` = 0.0853442241699639, `34` = 0.0472925601165015, `35` = 0.0137914487215383, `36` = 0.0344199345964457, `37` = 0.00462806453998214, `38` = 0.0244108894854371, `39` = 0.0712739921384746, `40` = 0.138291685879567, `41` = 2.25863676808212, `42` = 0.041879466676614, `43` = 0.0639107469605546, `44` = 0.0732314893681957, `45` = 0.0177986553992983, `46` = 0.0510720957508073, `47` = 0.0387893396929327, `48` = 0.0291201754522601, `49` = 0.123291760608223, `50` = 0.0477075339432312, `51` = 0.00971216313477626, `52` = 0.0402931536502631, `53` = 0.038668722428021, `54` = 0.0465806146735526, `55` = 0.252406419657931, `56` = 1.06276432566423, `57` = 9.1224856420283, `58` = 0.027580038036405, `59` = 8.39541680822017, `60` = 0.0128732020703896, `61` = 1.27921163530097, `62` = 54.4216204251156, `63` = 0.119211121278626, `64` = 0.0923498842405379, `65` = 0.342971401801723, `66` = 4.32322805635317, `67` = 0.0133725155451612, `68` = 5.23745011264233, `69` = 4.85497155939017, `70` = 0.678285282458964, `71` = 0.352968768757979, `72` = 0.141179731412389, `73` = 0.168394901451326, `74` = 1.25833649087064, `75` = 21.0730469753458, `76` = 0.25690370607382, `77` = 0.0221207138700995, `78` = 0.0829854693134184, `79` = 0.580890908551838, `80` = 0.185739513596903, `81` = 0.244780081363872, `82` = 0.0911839523287423, `83` = 0.00841526597133451, `84` = 0.246729656706909, `85` = 1.87765378325407, `86` = 1.38755227772006, `87` = 1.03561249396696, `88` = 0.156734262970157, `89` = 0.238174276630836, `90` = 0.0326324176925428, `91` = 0.313363643566276, `92` = 0.577372130713132, `93` = 10.2367260887453, `94` = 2.53411382702761, `95` = 0.130390159415935, `96` = 0.704421791269663, `97` = 0.0134789396241883, `98` = 0.727986464436283, `99` = 0.87830388041715, `100` = 23.3072869153332, `101` = 0.791757592153123, `102` = 0.135895074507758, `103` = 0.396830829920247, `104` = 0.128620655746915, `105` = 0.0677407251961777, `106` = 0.484768636428544, `107` = 0.0589346142783228, `108` = 0.48591916496511, `109` = 0.703609690691221, `110` = 0.314018728441365, `111` = 0.0866145523819305, `112` = 0.0961913581522431, `113` = 0.0386015238754767, `114` = 0.687421586631822, `115` = 0.363958068824632, `116` = 0.66315526724346, `117` = 0.0108455631296292, `118` = 0.486729777217768, `119` = 0.484890360209214, `120` = 0.330511722989856, `121` = 0.238269458438964, `122` = 0.0271164560628701, `123` = 20.5733485418445, `124` = 0.565206918739069, `125` = 12.9400612188192, `126` = 0.408049097702787, `127` = 0.0996177582298685, `128` = 0.0173494570121836, `129` = 0.0362019358729735, `130` = 0.545237559923504, `131` = 0.952224729028334, `132` = 0.210757421664626, `133` = 0.0341258863043333, `134` = 1.31032605473446, `135` = 0.0132290403094768, `136` = 0.168619217911475, `137` = 0.0682568628025685, `138` = 0.00732670712953307, `139` = 2.15633151353428, `140` = 0.0371635852185057, `141` = 0.179593823806418, `142` = 5.52885738688487, `143` = 1.22970793060639, `144` = 0.103016405888124, `145` = 0.963850005505055, `146` = 0.768183133776399, `147` = 9.3984781714674, `148` = 0.601548278959419, `149` = 0.949647712877973, `150` = 0.693343527124109, `151` = 0.164857013471054, `152` = 0.422499806729292, `153` = 8.95991774724342, `154` = 0.0613992948458115, `155` = 0.44320511115656, `156` = 5.17865275193106, `157` = 0.218705838171241, `158` = 0.0431653890418432, `159` = 0.0621102380354117, `160` = 0.160699037998341, `161` = 0.0649340045762491, `162` = 0.0761900331678755, `163` = 0.153145443698631, `164` = 0.242241174633358, `165` = 0.780126199589395, `166` = 0.440423075259914, `167` = 9.68877757155808, `168` = 0.303862749176556, `169` = 0.0676211202321121, `170` = 6.4258080215916, `171` = 10.2036168298501, `172` = 0.379336375105663, `173` = 0.180085445748226, `174` = 0.00940521484850177, `175` = 2.09381223911628, `176` = 0.024283520968003, `177` = 0.0375455254370814, `178` = 145.088879111643, `179` = 0.554742005579035, `180` = 0.325969614538547, `181` = 0.00154926981347808, `182` = 0.285700962911425, `183` = 0.883742882126734, `184` = 0.290042111970771, `185` = 2.12352583470028, `186` = 17.7517742253596, `187` = 1.29571952898481, `188` = 0.127034964743117, `189` = 1.40574176683419, `190` = 0.234975503424181, `191` = 0.119860228499061, `192` = 0.0012128146600248, `193` = 0.0728011957481889, `194` = 0.915535869929993, `195` = 9.38220781426139, `196` = 0.939207218760473, `197` = 1.19023001695675, `198` = 0.0513370740662727, `199` = 0.480622016124847, `200` = 0.00566268667674474, `201` = 0.910852343576699, `202` = 1.38524441330201, `203` = 0.18446386650688, `204` = 1.39617203955731, `205` = 0.645763685559404, `206` = 0.576475725348143, `207` = 4.92131679312344, `208` = 1.15789415097156, `209` = 0.371465086831334, `210` = 0.0140283648793372, `211` = 0.797322958281122, `212` = 0.157511743527207, `213` = 2.46442359630278, `214` = 0.0144064347517192, `215` = 0.0560260231747806, `216` = 0.294758850497789, `217` = 0.257751249639713, `218` = 0.0384157448410005, `219` = 0.0698161948146288, `220` = 1.21243338277181, `221` = 2.05256085550848, `222` = 0.472600374006667, `223` = 31.5236550875012, `224` = 3.56333365481761, `225` = 0.615801918340397, `226` = 0.0941729242860629, `227` = 113.33556809345, `228` = 1.33311817913066, `229` = 0.0897005614093759, `230` = 0.184821817218606, `231` = 0.183059226347987, `232` = 0.20200402233295, `233` = 0.0200793939007216, `234` = 0.16099295976045, `235` = 0.65540707569742, `236` = 0.0150929285558961, `237` = 0.000574069223468087, `238` = 0.210100808699423, `239` = 0.369156114787812, `240` = 1.13059455885368, `241` = 0.143593430894049, `242` = 0.789994807037354, `243` = 0.0395301840943151, `244` = 1.42536586478585, `245` = 1.44732310514628, `246` = 0.573329941115984, `247` = 5.12905009073607, `248` = 0.776135665752674, `249` = 0.215664864482711, `250` = 0.217243370523998, `251` = 0.3036062417198, `252` = 2.84625291964908, `253` = 0.853125383613871, `254` = 0.4754054514905, `255` = 0.0366187783464233, `256` = 0.167073970632985, `257` = 2.38502665937768, `258` = 0.0307868210306325, `259` = 0.580668327168257, `260` = 0.284990129853879, `261` = 0.883342913130899, `262` = 0.174388658033184, `263` = 0.174891158344067, `264` = 0.00387763175979265, `265` = 0.681145540729056, `266` = 0.0929132215135873, `267` = 0.216967914789294, `268` = 0.0330727231138405, `269` = 0.746663747193583, `270` = 1.3047938475399, `271` = 0.190377737111241, `272` = 12.9606649637112, `273` = 1.31512623536487, `274` = 2.28197379113866, `275` = 20.2192921674134, `276` = 0.0958025055029455, `277` = 1.72901349230764, `278` = 0.902413454370916, `279` = 0.12616079367709, `280` = 0.240353547551178, `281` = 0.0468714046065124, `282` = 0.884068996253487, `283` = 0.0867888994729131, `284` = 1.74645224986455, `285` = 0.0697250193492307, `286` = 0.655715319448059, `287` = 0.0650405738443486, `288` = 0.213929242299512, `289` = 0.0160408147605644, `290` = 0.449106391677939, `291` = 2.45467762323181, `292` = 0.500643188567274, `293` = 0.0105093145186396, `294` = 0.0373361798970666, `295` = 9.27242005021337, `296` = 4.61287531819681, `297` = 0.0339176413756911, `298` = 0.168335064070279, `299` = 0.701739667674419, `300` = 0.655401856866399, `301` = 0.110312011673142, `302` = 0.0193076557694032, `303` = 0.243986430600173, `304` = 2.57611804692249, `305` = 0.364871026702012, `306` = 0.0352861332798711, `307` = 0.128138139975473, `308` = 8.53773706961699, `309` = 0.143580729726494, `310` = 1.58010190427183, `311` = 6.43489423658577, `312` = 0.838831634509709, `313` = 0.0553670299045259, `314` = 0.321642381501253, `315` = 0.131246636865216, `316` = 3.96756768773146, `317` = 0.258868797852419, `318` = 2.75637106488952, `319` = 0.114396370478547, `320` = 0.0965643037863867, `321` = 0.462381244345123, `322` = 0.13398475854435, `323` = 0.0469941875464528, `324` = 0.00556026679984912, `325` = 0.369557695150875, `326` = 0.0841456106154774, `327` = 2.97596998235195, `328` = 0.0526996706345413, `329` = 3.24630907707187, `330` = 0.0961964548965904, `331` = 0.621639162623716, `332` = 2.06697405266263, `333` = 0.124540748744731, `334` = 1.04476812146794, `335` = 0.292470968318338, `336` = 0.03670310655242, `337` = 0.0747778158573605, `338` = 8.62957231204674, `339` = 0.227769966356801, `340` = 0.0688528030437406, `341` = 0.114745885392698, `342` = 0.245694412058763, `343` = 0.848209032888224, `344` = 1.23272177176755, `345` = 0.424937569468746, `346` = 1.28413040475059, `347` = 0.0765578155333178, `348` = 0.00334066963741409, `349` = 0.136714961054954, `350` = 0.125255342042087, `351` = 0.00353463420392328, `352` = 0.38937361557857, `353` = 0.073653334634517, `354` = 0.222450943745135, `355` = 0.00549774014561597, `356` = 1.03054887107199, `357` = 14.7781710781829, `358` = 0.0610976923189378, `359` = 0.278561922757745, `360` = 16.5615160471112, `361` = 2.21594009095631, `362` = 15.4316470027372, `363` = 0.344586624528936, `364` = 0.257483961231713, `365` = 0.0465141941420684, `366` = 5.97819363585569, `367` = 0.0272305449015851, `368` = 0.640199034078004, `369` = 0.317640725880205, `370` = 30.2001501478381, `371` = 0.104341383008543, `372` = 0.006414473140583, `373` = 0.202519382337339, `374` = 0.118061775227801, `375` = 0.0660011671250207, `376` = 0.165997423497651, `377` = 0.201675792339187, `378` = 0.0906947673184544, `379` = 0.939470303606913, `380` = 0.180440922129605, `381` = 0.00917062607914407, `382` = 0.000666543654273696, `383` = 0.040412615877646, `384` = 2.2797314599227, `385` = 0.672404470717142, `386` = 3.86923032805136, `387` = 0.895154459758244, `388` = 0.651010413078373, `389` = 0.017564843874201, `390` = 0.523288914308197, `391` = 8.25220270417037, `392` = 0.000415664693620441, `393` = 0.0271462647572042, `394` = 3.09540167603553, `395` = 0.992898766219418, `396` = 1.6643748695643, `397` = 0.3159879339821, `398` = 1.01294997671616, `399` = 0.131473847255866, `400` = 0.0207680188128334, `401` = 0.0306096946891626, `402` = 0.374042522662727, `403` = 0.055403116401617, `404` = 0.021484965786989, `405` = 0.796349352438733, `406` = 0.173104643944477, `407` = 6.32820714919541, `408` = 0.0377140931814801, `409` = 0.124776510226406, `410` = 0.300120046737883, `411` = 0.0213840605508142, `412` = 0.19803930594074, `413` = 0.0855591118141424, `414` = 0.00493500159502937, `415` = 0.198380558988778, `416` = 0.0443148276287729, `417` = 1.20625868411523, `418` = 0.10516450381253, `419` = 1.05115060104095, `420` = 0.461920655333754, `421` = 0.0110063982506111, `422` = 0.268082830154876, `423` = 0.103496407769027, `424` = 0.483878553927138, `425` = 1.28288383499195, `426` = 0.160075889362824, `427` = 8.05715872250659, `428` = 0.437786787573774, `429` = 0.0290042223217176, `430` = 1.51475168454514, `431` = 0.0308480279206156, `432` = 0.00284842561909116, `433` = 0.0699318308699846, `434` = 0.0795874837060327, `435` = 0.104450586285728, `436` = 8.4095705933057, `437` = 8.90424060618681, `438` = 0.538513981730683, `439` = 0.0102286977260714, `440` = 0.364524045843988, `441` = 0.914278568749492, `442` = 0.265375692787888, `443` = 0.489359781537227, `444` = 0.0196350754548274, `445` = 0.00995302258279301, `446` = 5.66886118369299, `447` = 0.591475197376789, `448` = 0.154984188073746, `449` = 0.663393131070836, `450` = 20.7502064248672, `451` = 0.714427616354399, `452` = 5.70989210768011, `453` = 5.23451479696775, `454` = 0.1553598373408, `455` = 1.57811451063957, `456` = 0.0957859477202971, `457` = 0.0187671463860911, `458` = 0.0321740329621, `459` = 0.259296563951283, `460` = 12.2622828657281, `461` = 0.157197891707945, `462` = 0.0260145857568418, `463` = 0.201615592442475, `464` = 0.50932742164051, `465` = 0.00980459148794019, `466` = 0.0430545398986719, `467` = 0.00742374032362738, `468` = 0.0281233519867905, `469` = 0.0599745506403162, `470` = 0.195229613278253, `471` = 5.69508026524406, `472` = 2.02616619943609, `473` = 0.2193765691756, `474` = 0.0415447365794113, `475` = 0.321511531032595, `476` = 1.03072870892625, `477` = 0.128224742461916, `478` = 2.84031484024093, `479` = 3.06481229159004, `480` = 0.0344960546656273, `481` = 0.0290639154315169, `482` = 1.39604717050386, `483` = 0.0122907763199618, `484` = 0.799937841027295, `485` = 0.202867665583825, `486` = 196.146270510139, `487` = 0.00155708594261984, `488` = 0.0657829857127773, `489` = 1.32419985610954, `490` = 3.5266496453957, `491` = 1.83881938485579, `492` = 0.0205294810510061, `493` = 10.8074261607574, `494` = 0.0106976655289179, `495` = 0.0383537729907181, `496` = 0.319647764337378, `497` = 28.6688972477658, `498` = 0.949730460895565, `499` = 0.543128190427298, `500` = 3.92307814658898)): object 'h' not found"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"Calculates DPIT residuals regression models semi-continuous outcomes. semi-continuous regression model Tweedie regression model tweedie package Tobit regression model VGAM, AER packages used function.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"","code":"resid_semiconti(model, plot=TRUE, scale = \"normal\")"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"model Model object (e.g., tweedie, vglm, tobit) plot logical value indicating whether return QQ-plot scale can choose scale residuals normal uniform scales. default scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"Residuals. plot=TRUE, also produces QQ plot.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"DPIT residual \\(\\)th semicontinuous observation defined follows: $$\\hat{r}_i = \\frac{\\hat{F}(Y_i|X_i)}{n}\\sum_{j=1}^{n}\\bigg(\\hat{p}_0(X_j) \\leq \\hat{F}(Y_i|X_i)\\bigg),$$ null distribution uniformity. \\(\\hat{F}\\) refers fitted cumulative distribution function, \\(\\hat{p}_0\\) refers fitted probability zero.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"Lu Yang (2024). Diagnostics Regression Models Semicontinuous Outcomes, Biometrics, https://arxiv.org/abs/2401.06347","code":""},{"path":[]},{"path":"https://jhlee1408.github.io/assessor/reference/resid_semiconti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals for regression models with semicontinuous outcomes — resid_semiconti","text":"","code":"## Tweedie model library(tweedie) library(statmod) n <- 500 x11 <- rnorm(n) x12 <- rnorm(n) beta0 <- 5 beta1 <- 1 beta2 <- 1 lambda1 <- exp(beta0 + beta1 * x11 + beta2 * x12) y1 <- rtweedie(n, mu = lambda1, xi = 1.6, phi = 10) # Choose parameter p # True model model1 <-   glm(y1 ~ x11 + x12,     family = tweedie(var.power = 1.6, link.power = 0)   ) resid.tweedie <- resid_semiconti(model1)   ## Tobit regression model library(VGAM) #> Loading required package: stats4 #> Loading required package: splines beta13 <- 1 beta14 <- -3 beta15 <- 3  set.seed(1234) x11 <- runif(n) x12 <- runif(n) lambda1 <- beta13 + beta14 * x11 + beta15 * x12 sd0 <- 0.3 yun <- rnorm(n, mean = lambda1, sd = sd0) y <- ifelse(yun >= 0, yun, 0)  # Using VGAM package # True model fit1 <- vglm(formula = y ~ x11 + x12, tobit(Upper = Inf, Lower = 0, lmu = \"identitylink\")) # Missing covariate fit1miss <- vglm(formula = y ~ x11, tobit(Upper = Inf, Lower = 0, lmu = \"identitylink\"))  resid.tobit1 <- resid_semiconti(fit1, plot = TRUE)  resid.tobit2 <- resid_semiconti(fit1miss, plot = TRUE)   # Using AER package library(AER) #> Loading required package: car #> Loading required package: carData #>  #> Attaching package: ‘car’ #> The following object is masked from ‘package:VGAM’: #>  #>     logit #> Loading required package: lmtest #> Loading required package: zoo #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric #>  #> Attaching package: ‘lmtest’ #> The following object is masked from ‘package:VGAM’: #>  #>     lrtest #> Loading required package: sandwich #> Loading required package: survival #>  #> Attaching package: ‘AER’ #> The following object is masked from ‘package:VGAM’: #>  #>     tobit # True model fit2 <- tobit(y ~ x11 + x12, left = 0, right = Inf, dist = \"gaussian\") # Missing covariate fit2miss <- tobit(y ~ x11, left = 0, right = Inf, dist = \"gaussian\") resid.aer1 <- resid_semiconti(fit2, plot = TRUE) #> Error in resid_semiconti(fit2, plot = TRUE): object 'y' not found resid.aer2 <- resid_semiconti(fit2miss, plot = TRUE) #> Error in resid_semiconti(fit2miss, plot = TRUE): object 'y' not found"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"Caluates DPIT residuals regression model zero-inflated discrete outcome. zero-inflated model pscl used function.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"","code":"resid_zeroinfl(model, plot=TRUE, scale='normal')"},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"model Model object, output pscl::zeroinfl. plot logical value indicating whether return QQ-plot. scale can choose scale residuals among normal uniform scales. default scale normal.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"DPIT residuals. plot=TRUE, also produces QQ plot.","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"Yang, Lu. \"Double Probability Integral Transform Residuals Regression Models Discrete Outcomes.\" arXiv preprint arXiv:2308.15596 (2023).","code":""},{"path":"https://jhlee1408.github.io/assessor/reference/resid_zeroinfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals for regression models with zero-inflated outcomes — resid_zeroinfl","text":"","code":"## Zero-Inflated Poisson library(pscl) n <- 500 set.seed(1234) # Covariates x1 <- rnorm(n) x2 <- rbinom(n, 1, 0.7) # Coefficients beta0 <- -2 beta1 <- 2 beta2 <- 1 beta00 <- -2 beta10 <- 2  # Mean of Poisson part lambda1 <- exp(beta0 + beta1 * x1 + beta2 * x2) # Excess zero probability p0 <- 1 / (1 + exp(-(beta00 + beta10 * x1))) ## simulate outcomes y0 <- rbinom(n, size = 1, prob = 1 - p0) y1 <- rpois(n, lambda1) y <- ifelse(y0 == 0, 0, y1) ## True model modelzero1 <- zeroinfl(y ~ x1 + x2 | x1, dist = \"poisson\", link = \"logit\") resid.zero1 <- resid_zeroinfl(modelzero1, plot = TRUE, scale = \"uniform\")   ## Zero inflation modelzero2 <- glm(y ~ x1 + x2, family = poisson(link = \"log\")) resid.zero2 <- resid_disc(modelzero2, plot = TRUE, scale = \"normal\")"}]
